{"version":3,"sources":["../src/talk_to_figma_mcp/server.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { z } from \"zod\";\nimport WebSocket from 'ws';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define TypeScript interfaces for Figma responses\ninterface FigmaResponse {\n  id: string;\n  result?: any;\n  error?: string;\n}\n\n// Custom logging functions that write to stderr instead of stdout to avoid being captured\nconst logger = {\n  info: (message: string) => process.stderr.write(`[INFO] ${message}\\n`),\n  debug: (message: string) => process.stderr.write(`[DEBUG] ${message}\\n`),\n  warn: (message: string) => process.stderr.write(`[WARN] ${message}\\n`),\n  error: (message: string) => process.stderr.write(`[ERROR] ${message}\\n`),\n  log: (message: string) => process.stderr.write(`[LOG] ${message}\\n`)\n};\n\n// WebSocket connection and request tracking\nlet ws: WebSocket | null = null;\nconst pendingRequests = new Map<string, {\n  resolve: (value: unknown) => void;\n  reject: (reason: unknown) => void;\n  timeout: ReturnType<typeof setTimeout>;\n}>();\n\n// Track which channel each client is in\nlet currentChannel: string | null = null;\n\n// Create MCP server\nconst server = new McpServer({\n  name: \"TalkToFigmaMCP\",\n  version: \"1.0.0\",\n});\n\n// Add command line argument parsing\nconst args = process.argv.slice(2);\nconst serverArg = args.find(arg => arg.startsWith('--server='));\nconst serverUrl = serverArg ? serverArg.split('=')[1] : 'localhost';\nconst WS_URL = serverUrl === 'localhost' ? `ws://${serverUrl}` : `wss://${serverUrl}`;\n\n// Document Info Tool\nserver.tool(\n  \"get_document_info\",\n  \"Get detailed information about the current Figma document\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma('get_document_info');\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting document info: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Selection Tool\nserver.tool(\n  \"get_selection\",\n  \"Get information about the current selection in Figma\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma('get_selection');\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting selection: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Node Info Tool\nserver.tool(\n  \"get_node_info\",\n  \"Get detailed information about a specific node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to get information about\")\n  },\n  async ({ nodeId }) => {\n    try {\n      const result = await sendCommandToFigma('get_node_info', { nodeId });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting node info: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Nodes Info Tool\nserver.tool(\n  \"get_nodes_info\",\n  \"Get detailed information about multiple nodes in Figma\",\n  {\n    nodeIds: z.array(z.string()).describe(\"Array of node IDs to get information about\")\n  },\n  async ({ nodeIds }) => {\n    try {\n      const results = await Promise.all(\n        nodeIds.map(async (nodeId) => {\n          const result = await sendCommandToFigma('get_node_info', { nodeId });\n          return { nodeId, info: result };\n        })\n      );\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(results)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting nodes info: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Create Rectangle Tool\nserver.tool(\n  \"create_rectangle\",\n  \"Create a new rectangle in Figma\",\n  {\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\"),\n    width: z.number().describe(\"Width of the rectangle\"),\n    height: z.number().describe(\"Height of the rectangle\"),\n    name: z.string().optional().describe(\"Optional name for the rectangle\"),\n    parentId: z.string().optional().describe(\"Optional parent node ID to append the rectangle to\")\n  },\n  async ({ x, y, width, height, name, parentId }) => {\n    try {\n      const result = await sendCommandToFigma('create_rectangle', {\n        x, y, width, height, name: name || 'Rectangle', parentId\n      });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created rectangle \"${JSON.stringify(result)}\"`\n          }\n        ]\n      }\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating rectangle: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Create Frame Tool\nserver.tool(\n  \"create_frame\",\n  \"Create a new frame in Figma\",\n  {\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\"),\n    width: z.number().describe(\"Width of the frame\"),\n    height: z.number().describe(\"Height of the frame\"),\n    name: z.string().optional().describe(\"Optional name for the frame\"),\n    parentId: z.string().optional().describe(\"Optional parent node ID to append the frame to\"),\n    fillColor: z.object({\n      r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n      g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n      b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n      a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\")\n    }).optional().describe(\"Fill color in RGBA format\"),\n    strokeColor: z.object({\n      r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n      g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n      b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n      a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\")\n    }).optional().describe(\"Stroke color in RGBA format\"),\n    strokeWeight: z.number().positive().optional().describe(\"Stroke weight\")\n  },\n  async ({ x, y, width, height, name, parentId, fillColor, strokeColor, strokeWeight }) => {\n    try {\n      const result = await sendCommandToFigma('create_frame', {\n        x, y, width, height, name: name || 'Frame', parentId,\n        fillColor: fillColor || { r: 1, g: 1, b: 1, a: 1 },\n        strokeColor: strokeColor,\n        strokeWeight: strokeWeight\n      });\n      const typedResult = result as { name: string, id: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created frame \"${typedResult.name}\" with ID: ${typedResult.id}. Use the ID as the parentId to appendChild inside this frame.`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating frame: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Create Text Tool\nserver.tool(\n  \"create_text\",\n  \"Create a new text element in Figma\",\n  {\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\"),\n    text: z.string().describe(\"Text content\"),\n    fontSize: z.number().optional().describe(\"Font size (default: 14)\"),\n    fontWeight: z.number().optional().describe(\"Font weight (e.g., 400 for Regular, 700 for Bold)\"),\n    fontColor: z.object({\n      r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n      g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n      b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n      a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\")\n    }).optional().describe(\"Font color in RGBA format\"),\n    name: z.string().optional().describe(\"Optional name for the text node by default following text\"),\n    parentId: z.string().optional().describe(\"Optional parent node ID to append the text to\")\n  },\n  async ({ x, y, text, fontSize, fontWeight, fontColor, name, parentId }) => {\n    try {\n      const result = await sendCommandToFigma('create_text', {\n        x, y, text,\n        fontSize: fontSize || 14,\n        fontWeight: fontWeight || 400,\n        fontColor: fontColor || { r: 0, g: 0, b: 0, a: 1 },\n        name: name || 'Text',\n        parentId\n      });\n      const typedResult = result as { name: string, id: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created text \"${typedResult.name}\" with ID: ${typedResult.id}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating text: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Set Fill Color Tool\nserver.tool(\n  \"set_fill_color\",\n  \"Set the fill color of a node in Figma can be TextNode or FrameNode\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to modify\"),\n    r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n    g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n    b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n    a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\")\n  },\n  async ({ nodeId, r, g, b, a }) => {\n    try {\n      const result = await sendCommandToFigma('set_fill_color', {\n        nodeId,\n        color: { r, g, b, a: a || 1 }\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set fill color of node \"${typedResult.name}\" to RGBA(${r}, ${g}, ${b}, ${a || 1})`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting fill color: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Set Stroke Color Tool\nserver.tool(\n  \"set_stroke_color\",\n  \"Set the stroke color of a node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to modify\"),\n    r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n    g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n    b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n    a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n    weight: z.number().positive().optional().describe(\"Stroke weight\")\n  },\n  async ({ nodeId, r, g, b, a, weight }) => {\n    try {\n      const result = await sendCommandToFigma('set_stroke_color', {\n        nodeId,\n        color: { r, g, b, a: a || 1 },\n        weight: weight || 1\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set stroke color of node \"${typedResult.name}\" to RGBA(${r}, ${g}, ${b}, ${a || 1}) with weight ${weight || 1}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting stroke color: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Move Node Tool\nserver.tool(\n  \"move_node\",\n  \"Move a node to a new position in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to move\"),\n    x: z.number().describe(\"New X position\"),\n    y: z.number().describe(\"New Y position\")\n  },\n  async ({ nodeId, x, y }) => {\n    try {\n      const result = await sendCommandToFigma('move_node', { nodeId, x, y });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Moved node \"${typedResult.name}\" to position (${x}, ${y})`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error moving node: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Clone Node Tool\nserver.tool(\n  \"clone_node\",\n  \"Clone an existing node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to clone\"),\n    x: z.number().optional().describe(\"New X position for the clone\"),\n    y: z.number().optional().describe(\"New Y position for the clone\")\n  },\n  async ({ nodeId, x, y }) => {\n    try {\n      const result = await sendCommandToFigma('clone_node', { nodeId, x, y });\n      const typedResult = result as { name: string, id: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Cloned node \"${typedResult.name}\" with new ID: ${typedResult.id}${x !== undefined && y !== undefined ? ` at position (${x}, ${y})` : ''}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error cloning node: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Resize Node Tool\nserver.tool(\n  \"resize_node\",\n  \"Resize a node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to resize\"),\n    width: z.number().positive().describe(\"New width\"),\n    height: z.number().positive().describe(\"New height\")\n  },\n  async ({ nodeId, width, height }) => {\n    try {\n      const result = await sendCommandToFigma('resize_node', { nodeId, width, height });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Resized node \"${typedResult.name}\" to width ${width} and height ${height}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error resizing node: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Delete Node Tool\nserver.tool(\n  \"delete_node\",\n  \"Delete a node from Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to delete\")\n  },\n  async ({ nodeId }) => {\n    try {\n      await sendCommandToFigma('delete_node', { nodeId });\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Deleted node with ID: ${nodeId}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error deleting node: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Get Styles Tool\nserver.tool(\n  \"get_styles\",\n  \"Get all styles from the current Figma document\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma('get_styles');\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting styles: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Get Local Components Tool\nserver.tool(\n  \"get_local_components\",\n  \"Get all local components from the Figma document\",\n  {},\n  async () => {\n    try {\n      const result = await sendCommandToFigma('get_local_components');\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(result)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting local components: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Get Team Components Tool\n// server.tool(\n//   \"get_team_components\",\n//   \"Get all team library components available in Figma\",\n//   {},\n//   async () => {\n//     try {\n//       const result = await sendCommandToFigma('get_team_components');\n//       return {\n//         content: [\n//           {\n//             type: \"text\",\n//             text: JSON.stringify(result, null, 2)\n//           }\n//         ]\n//       };\n//     } catch (error) {\n//       return {\n//         content: [\n//           {\n//             type: \"text\",\n//             text: `Error getting team components: ${error instanceof Error ? error.message : String(error)}`\n//           }\n//         ]\n//       };\n//     }\n//   }\n// );\n\n// Create Component Instance Tool\nserver.tool(\n  \"create_component_instance\",\n  \"Create an instance of a component in Figma\",\n  {\n    componentKey: z.string().describe(\"Key of the component to instantiate\"),\n    x: z.number().describe(\"X position\"),\n    y: z.number().describe(\"Y position\")\n  },\n  async ({ componentKey, x, y }) => {\n    try {\n      const result = await sendCommandToFigma('create_component_instance', { componentKey, x, y });\n      const typedResult = result as { name: string, id: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Created component instance \"${typedResult.name}\" with ID: ${typedResult.id}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error creating component instance: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Export Node as Image Tool\nserver.tool(\n  \"export_node_as_image\",\n  \"Export a node as an image from Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to export\"),\n    format: z.enum([\"PNG\", \"JPG\", \"SVG\", \"PDF\"]).optional().describe(\"Export format\"),\n    scale: z.number().positive().optional().describe(\"Export scale\")\n  },\n  async ({ nodeId, format, scale }) => {\n    try {\n      const result = await sendCommandToFigma('export_node_as_image', {\n        nodeId,\n        format: format || 'PNG',\n        scale: scale || 1\n      });\n      const typedResult = result as any;\n\n      // return {\n      //   content: [\n      //     {\n      //       type: \"image\",\n      //       data: typedResult.imageData,\n      //       mimeType: typedResult.mimeType || \"image/png\"\n      //     }\n      //   ]\n      // };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(typedResult),\n          }\n        ]\n      }\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error exporting node as image: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Execute Figma Code Tool\n// server.tool(\n//   \"execute_figma_code\",\n//   \"Execute arbitrary JavaScript code in Figma (use with caution)\",\n//   {\n//     code: z.string().describe(\"JavaScript code to execute in Figma\")\n//   },\n//   async ({ code }) => {\n//     try {\n//       const result = await sendCommandToFigma('execute_code', { code });\n//       return {\n//         content: [\n//           {\n//             type: \"text\",\n//             text: `Code executed successfully: ${JSON.stringify(result, null, 2)}`\n//           }\n//         ]\n//       };\n//     } catch (error) {\n//       return {\n//         content: [\n//           {\n//             type: \"text\",\n//             text: `Error executing code: ${error instanceof Error ? error.message : String(error)}`\n//           }\n//         ]\n//       };\n//     }\n//   }\n// );\n\n// Set Corner Radius Tool\nserver.tool(\n  \"set_corner_radius\",\n  \"Set the corner radius of a node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the node to modify\"),\n    radius: z.number().min(0).describe(\"Corner radius value\"),\n    corners: z.array(z.boolean()).length(4).optional().describe(\"Optional array of 4 booleans to specify which corners to round [topLeft, topRight, bottomRight, bottomLeft]\")\n  },\n  async ({ nodeId, radius, corners }) => {\n    try {\n      const result = await sendCommandToFigma('set_corner_radius', {\n        nodeId,\n        radius,\n        corners: corners || [true, true, true, true]\n      });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Set corner radius of node \"${typedResult.name}\" to ${radius}px`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting corner radius: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Set Text Content Tool\nserver.tool(\n  \"set_text_content\",\n  \"Set the text content of an existing text node in Figma\",\n  {\n    nodeId: z.string().describe(\"The ID of the text node to modify\"),\n    text: z.string().describe(\"New text content\")\n  },\n  async ({ nodeId, text }) => {\n    try {\n      const result = await sendCommandToFigma('set_text_content', { nodeId, text });\n      const typedResult = result as { name: string };\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Updated text content of node \"${typedResult.name}\" to \"${text}\"`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error setting text content: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Define design strategy prompt\nserver.prompt(\n  \"design_strategy\",\n  \"Best practices for working with Figma designs\",\n  (extra) => {\n    return {\n      messages: [\n        {\n          role: \"assistant\",\n          content: {\n            type: \"text\",\n            text: `When working with Figma designs, follow these best practices:\n\n1. Start with Document Structure:\n   - First use get_document_info() to understand the current document\n   - Plan your layout hierarchy before creating elements\n   - Create a main container frame for each screen/section\n\n2. Naming Conventions:\n   - Use descriptive, semantic names for all elements\n   - Follow a consistent naming pattern (e.g., \"Login Screen\", \"Logo Container\", \"Email Input\")\n   - Group related elements with meaningful names\n\n3. Layout Hierarchy:\n   - Create parent frames first, then add child elements\n   - For forms/login screens:\n     * Start with the main screen container frame\n     * Create a logo container at the top\n     * Group input fields in their own containers\n     * Place action buttons (login, submit) after inputs\n     * Add secondary elements (forgot password, signup links) last\n\n4. Input Fields Structure:\n   - Create a container frame for each input field\n   - Include a label text above or inside the input\n   - Group related inputs (e.g., username/password) together\n\n5. Element Creation:\n   - Use create_frame() for containers and input fields\n   - Use create_text() for labels, buttons text, and links\n   - Set appropriate colors and styles:\n     * Use fillColor for backgrounds\n     * Use strokeColor for borders\n     * Set proper fontWeight for different text elements\n\n6. Mofifying existing elements:\n  - use set_text_content() to modify text content.\n\n7. Visual Hierarchy:\n   - Position elements in logical reading order (top to bottom)\n   - Maintain consistent spacing between elements\n   - Use appropriate font sizes for different text types:\n     * Larger for headings/welcome text\n     * Medium for input labels\n     * Standard for button text\n     * Smaller for helper text/links\n\n8. Best Practices:\n   - Verify each creation with get_node_info()\n   - Use parentId to maintain proper hierarchy\n   - Group related elements together in frames\n   - Keep consistent spacing and alignment\n\nExample Login Screen Structure:\n- Login Screen (main frame)\n  - Logo Container (frame)\n    - Logo (image/text)\n  - Welcome Text (text)\n  - Input Container (frame)\n    - Email Input (frame)\n      - Email Label (text)\n      - Email Field (frame)\n    - Password Input (frame)\n      - Password Label (text)\n      - Password Field (frame)\n  - Login Button (frame)\n    - Button Text (text)\n  - Helper Links (frame)\n    - Forgot Password (text)\n    - Don't have account (text)`\n          }\n        }\n      ],\n      description: \"Best practices for working with Figma designs\"\n    };\n  }\n);\n\n// Define command types and parameters\ntype FigmaCommand =\n  | 'get_document_info'\n  | 'get_selection'\n  | 'get_node_info'\n  | 'create_rectangle'\n  | 'create_frame'\n  | 'create_text'\n  | 'set_fill_color'\n  | 'set_stroke_color'\n  | 'move_node'\n  | 'resize_node'\n  | 'delete_node'\n  | 'get_styles'\n  | 'get_local_components'\n  | 'get_team_components'\n  | 'create_component_instance'\n  | 'export_node_as_image'\n  | 'execute_code'\n  | 'join'\n  | 'set_corner_radius'\n  | 'set_text_content'\n  | 'clone_node';\n\n// Update the connectToFigma function\nfunction connectToFigma(port: number = 3055) {\n  // If already connected, do nothing\n  if (ws && ws.readyState === WebSocket.OPEN) {\n    logger.info('Already connected to Figma');\n    return;\n  }\n\n  const wsUrl = serverUrl === 'localhost' ? `${WS_URL}:${port}` : WS_URL;\n  logger.info(`Connecting to Figma socket server at ${wsUrl}...`);\n  ws = new WebSocket(wsUrl);\n\n  ws.on('open', () => {\n    logger.info('Connected to Figma socket server');\n    // Reset channel on new connection\n    currentChannel = null;\n  });\n\n  ws.on('message', (data: any) => {\n    try {\n      const json = JSON.parse(data) as { message: FigmaResponse };\n      const myResponse = json.message;\n      logger.debug(`Received message: ${JSON.stringify(myResponse)}`);\n      logger.log('myResponse' + JSON.stringify(myResponse));\n\n      // Handle response to a request\n      if (myResponse.id && pendingRequests.has(myResponse.id) && myResponse.result) {\n        const request = pendingRequests.get(myResponse.id)!;\n        clearTimeout(request.timeout);\n\n        if (myResponse.error) {\n          logger.error(`Error from Figma: ${myResponse.error}`);\n          request.reject(new Error(myResponse.error));\n        } else {\n          if (myResponse.result) {\n            request.resolve(myResponse.result);\n          }\n        }\n\n        pendingRequests.delete(myResponse.id);\n      } else {\n        // Handle broadcast messages or events\n        logger.info(`Received broadcast message: ${JSON.stringify(myResponse)}`);\n      }\n    } catch (error) {\n      logger.error(`Error parsing message: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  });\n\n  ws.on('error', (error) => {\n    logger.error(`Socket error: ${error}`);\n  });\n\n  ws.on('close', () => {\n    logger.info('Disconnected from Figma socket server');\n    ws = null;\n\n    // Reject all pending requests\n    for (const [id, request] of pendingRequests.entries()) {\n      clearTimeout(request.timeout);\n      request.reject(new Error('Connection closed'));\n      pendingRequests.delete(id);\n    }\n\n    // Attempt to reconnect\n    logger.info('Attempting to reconnect in 2 seconds...');\n    setTimeout(() => connectToFigma(port), 2000);\n  });\n}\n\n// Function to join a channel\nasync function joinChannel(channelName: string): Promise<void> {\n  if (!ws || ws.readyState !== WebSocket.OPEN) {\n    throw new Error('Not connected to Figma');\n  }\n\n  try {\n    await sendCommandToFigma('join', { channel: channelName });\n    currentChannel = channelName;\n    logger.info(`Joined channel: ${channelName}`);\n  } catch (error) {\n    logger.error(`Failed to join channel: ${error instanceof Error ? error.message : String(error)}`);\n    throw error;\n  }\n}\n\n// Function to send commands to Figma\nfunction sendCommandToFigma(command: FigmaCommand, params: unknown = {}): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    // If not connected, try to connect first\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      connectToFigma();\n      reject(new Error('Not connected to Figma. Attempting to connect...'));\n      return;\n    }\n\n    // Check if we need a channel for this command\n    const requiresChannel = command !== 'join';\n    if (requiresChannel && !currentChannel) {\n      reject(new Error('Must join a channel before sending commands'));\n      return;\n    }\n\n    const id = uuidv4();\n    const request = {\n      id,\n      type: command === 'join' ? 'join' : 'message',\n      ...(command === 'join' ? { channel: (params as any).channel } : { channel: currentChannel }),\n      message: {\n        id,\n        command,\n        params: {\n          ...(params as any),\n        }\n      }\n    };\n\n    // Set timeout for request\n    const timeout = setTimeout(() => {\n      if (pendingRequests.has(id)) {\n        pendingRequests.delete(id);\n        logger.error(`Request ${id} to Figma timed out after 30 seconds`);\n        reject(new Error('Request to Figma timed out'));\n      }\n    }, 30000); // 30 second timeout\n\n    // Store the promise callbacks to resolve/reject later\n    pendingRequests.set(id, { resolve, reject, timeout });\n\n    // Send the request\n    logger.info(`Sending command to Figma: ${command}`);\n    logger.debug(`Request details: ${JSON.stringify(request)}`);\n    ws.send(JSON.stringify(request));\n  });\n}\n\n// Update the join_channel tool\nserver.tool(\n  \"join_channel\",\n  \"Join a specific channel to communicate with Figma\",\n  {\n    channel: z.string().describe(\"The name of the channel to join\").default(\"\")\n  },\n  async ({ channel }) => {\n    try {\n      if (!channel) {\n        // If no channel provided, ask the user for input\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"Please provide a channel name to join:\"\n            }\n          ],\n          followUp: {\n            tool: \"join_channel\",\n            description: \"Join the specified channel\"\n          }\n        };\n      }\n\n      await joinChannel(channel);\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Successfully joined channel: ${channel}`\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error joining channel: ${error instanceof Error ? error.message : String(error)}`\n          }\n        ]\n      };\n    }\n  }\n);\n\n// Start the server\nasync function main() {\n  try {\n    // Try to connect to Figma socket server\n    connectToFigma();\n  } catch (error) {\n    logger.warn(`Could not connect to Figma initially: ${error instanceof Error ? error.message : String(error)}`);\n    logger.warn('Will try to connect when the first command is sent');\n  }\n\n  // Start the MCP server with stdio transport\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  logger.info('FigmaMCP server running on stdio');\n}\n\n// Run the server\nmain().catch(error => {\n  logger.error(`Error starting FigmaMCP server: ${error instanceof Error ? error.message : String(error)}`);\n  process.exit(1);\n});"],"mappings":"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","names":[]}